// This file was generated by prisma-merge-schema (https://www.npmjs.com/package/prisma-merge-schema)
datasource postgres {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

model Address {
  id         String  @id @default(cuid())
  fullname   String
  address    String
  region     String?
  nearby     String?
  zipcode    String
  city       String
  state      String
  country    String
  regionName String
  // userId    String
  active     Boolean @default(true)
}

model ContentEntity {
  id      String   @id @default(uuid())
  source  DiscType
  title   String
  content String

  parentId  String? // comment
  parent    ContentEntity?  @relation("TreeRelation", fields: [parentId], references: [id])
  successor ContentEntity[] @relation("TreeRelation")
}

enum DiscType {
  Forum
  Blog
  Comment
}

model DiscCommentJour {
  id         String   @id @default(uuid())
  contentId  String
  accountId  String
  minuteRead Int
  rating     Int      @default(0)
  favor      Boolean
  disfavor   Boolean
  share      String[]
  Donate     Int[]
  name       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([accountId, contentId])
}

// model DiscComment {
//   id        String   @id @default(uuid())
//   contentId String
//   rating    Int      @default(0)
//   favor     Boolean
//   disfavor  Boolean
//   share     String[]
//   Donate    Int[]
//   name      String[]

//   @@index([contentId])
// }
model DiscIndicator {
  contentId     String @id @default(uuid())
  minuteRead    Int?
  viewCount     Int    @default(0)
  commentCount  Int    @default(0)
  favorCount    Int    @default(0)
  disfavorCount Int    @default(0)
  shareCount    Int    @default(0)
  ratingCount   Int    @default(0)
  rating        Int    @default(0)

}

// DiscCommentJour
// model TagPostJour {
//   id        String   @id @default(uuid())
//   postId    String
//   accountId String
//   name      String[]

//   @@index([accountId])
// }

model TagPost {
  id     String   @id @default(uuid())
  postId String
  name   String[]
  prop   String[]

  @@index([postId])
}

model Task {
  id      String   @id @default(uuid())
  title   String
  type    TaskType @default(Guidance)
  content String?
  //   managers  AccountDisc[] @relation("TaskManager")
  //   executor  AccountDisc[] @relation("TaskExecutor")

  relationBy Task[] @relation("RelationTask", references: [id])
  relationTo Task[] @relation("RelationTask", references: [id])

  PostId String
  //   activity Post @relation(fields: [PostId], references: [id])
}

enum TaskType {
  Complaints
  Guidance
  SubTask
  Project
}

model Cooperation {
  id       String    @id @default(uuid())
  taskId   String
  managers Account[] @relation("TaskManager")
  executor Account[] @relation("TaskExecutor")
  //   managers String[] @relation("TaskManager")
  //   executor String[] @relation("TaskExecutor")

  @@index([taskId])
}

model User {
  id            String    @id @default(uuid())
  mainAccountId String
  Account       Account[]
}

// The unique identity of the subject.UIS
model Account {
  id Int @id @default(autoincrement())

  accountName String
  userId      String
  user        User   @relation(fields: [userId], references: [id])

  asTaskManager  Cooperation[] @relation("TaskManager")
  asTaskExecutor Cooperation[] @relation("TaskExecutor")
  @@index([userId])
}

model Profile {
  accountId String    @id @default(uuid())
  contact   Contact[]

  avatar      String?
  //   description String?
  dateOfBirth DateTime?
  phone       String?   @unique
  bio         String?
  addressId   String[]

  editedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  //   user Account @relation(fields: [id], references: [id])
}

model Contact {
  id      String  @id @default(uuid())
  profile Profile @relation(fields: [id], references: [accountId])
  name    String?
  phone   String? @unique
  address String
}
